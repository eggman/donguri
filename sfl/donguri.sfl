%i "alu32.sfl"

declare shift32 {
	input		in<32>;
	input		count<5>;
	input		ci;
	input		dir<2>;		//lsl, lsr, asr, por, prx;
	output		out<32>;

	instrin		immrot, simm, sreg;

	instr_arg	immrot(in, count);
	instr_arg	simm(in, count, dir);
	instr_arg	sreg(in, count, dir);
}

declare inc26 {
	input       in<26>;
	output      out<24>;
	instrin     do ;
	instr_arg	do(in);
}

/* 32bit shifter */
module shift32 {
	input		in<32>;
	input		count<5>;
//	input		ci;
	input		dir<2>;		//lsl, lsr, asr, por, prx;
	output		out<32>;

	instrin		immrot, simm, sreg;

	instruct	immrot {
		out = in;
	}
	instruct	simm {
		out = in;
	}
	instruct	sreg {
		out = in;
	}
}

/* 26-bit incrementer */
circuit inc26 {
	input       in<26> ;
	output      out<24> ;
	instrin     do ;
	reg_wr		adr<24> ;

	instruct do {
				adr := in<25:2> + (0x000001); 
				out = adr;
	}
}

module donguri {
	input	cpu_en;
	input	cpu_restart;
	input	rom_data<32>;

	output	rom_addr<26>;

	instrin	fiq, irq;
	instrin	start;
	instrout rd;

	instrself read;

	/* for dedode and execute */
	instrself	oDP0, oDP1, oDP2, oB;
	instrself	opAND, opEOR, opSUB, opRSB, opADD, opADC, opSBC, opRSC, opTST, opTEQ, opCMP, opCMN, opORR, opMOV, opBIC, opMVN;
	instrself decop;

	sel dbi<32>;			/* Data Input bus */
	sel Rn<32>, Rm<32>;		/* output of Register bank */
	sel Abus<32>;
	sel Bbus<32>;
	sel OP2bus<32>;
	sel ALUbus<32>;
	sel PCbus<26>;
	sel INCbus<24>;
	sel ADRbus<26>;

	reg_wr	r0<32>,r1<32>,r2<32>,r3<32>,r4<32>,r5<32>,r6<32>,r7<32>,r8<32>,r9<32>,r10<32>,r11<32>,r12<32>,r13<32>,r14<32>;
	reg_wr	psr_n, psr_z, psr_c, psr_v, psr_i, psr_f, pc<24>, psr_mode<2>;	/* r15 */
	reg_wr	opc<32>;		/* instrunction at exec stage*/
	reg_wr	adr<26>;		/* output addres register */

	alu32	alu;
	shift32	shift;
	inc26	inc;

	stage_name ifetch{		/* instruction fetch */
		task run();
	}

	stage_name decode{		/* instruction decode */
		task dec();
	}

	stage_name exec{		/* execute */
		task exe();
	}

/* Common operatins for every stages */
	par {
		par {

			if (oDP0 | oDP1 | oDP2)
			any {
				opc<15:12>==0x0: r0  := ALUbus;
				opc<15:12>==0x1: r1  := ALUbus;
				opc<15:12>==0x2: r2  := ALUbus;
				opc<15:12>==0x3: r3  := ALUbus;
				opc<15:12>==0x4: r4  := ALUbus;
				opc<15:12>==0x5: r5  := ALUbus;
				opc<15:12>==0x6: r6  := ALUbus;
				opc<15:12>==0x7: r7  := ALUbus;
				opc<15:12>==0x8: r8  := ALUbus;
				opc<15:12>==0x9: r9  := ALUbus;
				opc<15:12>==0xa: r10 := ALUbus;
				opc<15:12>==0xb: r11 := ALUbus;
				opc<15:12>==0xc: r12 := ALUbus;
				opc<15:12>==0xd: r13 := ALUbus;
				opc<15:12>==0xe: r14 := ALUbus;
			}
			if (oDP0 | oDP1 | oDP2)
			any {
				opc<15:12>==0xf: par {
										psr_n := ALUbus<31>;
										psr_z := ALUbus<30>;
										psr_c := ALUbus<29>;
										psr_v := ALUbus<28>;
										psr_i := ALUbus<27>;
										psr_f := ALUbus<26>;
										pc    := ALUbus<25:2>;
									 }
				else : pc := INCbus;
			}
		}

		if (oDP0 | oDP1 | oDP2)
		any {
			opc<19:16>==0x0: Rn = r0;
			opc<19:16>==0x1: Rn = r1;
			opc<19:16>==0x2: Rn = r2;
			opc<19:16>==0x3: Rn = r3;
			opc<19:16>==0x4: Rn = r4;
			opc<19:16>==0x5: Rn = r5;
			opc<19:16>==0x6: Rn = r6;
			opc<19:16>==0x7: Rn = r7;
			opc<19:16>==0x8: Rn = r8;
			opc<19:16>==0x9: Rn = r9;
			opc<19:16>==0xa: Rn = r10;
			opc<19:16>==0xb: Rn = r11;
			opc<19:16>==0xc: Rn = r12;
			opc<19:16>==0xd: Rn = r13;
			opc<19:16>==0xe: Rn = r14;
			opc<19:16>==0xf: Rn = 0b000000||pc||0b00;
		}

		if (oDP0 | oDP1)
		any {
			opc<3:0>==0x0: Rm = r0;
			opc<3:0>==0x1: Rm = r1;
			opc<3:0>==0x2: Rm = r2;
			opc<3:0>==0x3: Rm = r3;
			opc<3:0>==0x4: Rm = r4;
			opc<3:0>==0x5: Rm = r5;
			opc<3:0>==0x6: Rm = r6;
			opc<3:0>==0x7: Rm = r7;
			opc<3:0>==0x8: Rm = r8;
			opc<3:0>==0x9: Rm = r9;
			opc<3:0>==0xa: Rm = r10;
			opc<3:0>==0xb: Rm = r11;
			opc<3:0>==0xc: Rm = r12;
			opc<3:0>==0xd: Rm = r13;
			opc<3:0>==0xe: Rm = r14;
			opc<3:0>==0xf: Rm = psr_n||psr_z||psr_c||psr_v||psr_i||psr_f||pc||psr_mode;
		}

		rom_addr = adr;
	}

	instruct read { par {dbi = rom_data; rd();}  opc := dbi;}

	instruct start generate ifetch.run();

	instruct decop par {
		any {
			opc<27:25>==0b000 & ( opc<24:23>!=0b10 | opc<20> ) & ^opc<4>:   		oDP0(); 	/* Data Proccessing shift Im */
			opc<27:25>==0b000 & ( opc<24:23>!=0b10 | opc<20> ) &  opc<4> & ^opc<7>:	oDP1();		/* Data Proccessing shift Rs */
			opc<27:25>==0b001 & ( opc<24:23>!=0b10 | opc<20> ): 					oDP2();		/* Data Proccessing Im */
			opc<27:25>==0b101:  	oB();						/* Branch and branch wih link */
		}

		// for ALU
		if (oDP0 | oDP1 | oDP2)
		any {
			opc<24:21>==0x0: opAND();
			opc<24:21>==0x1: opEOR();
			opc<24:21>==0x2: opSUB();
			opc<24:21>==0x3: opRSB();
			opc<24:21>==0x4: opADD();
			opc<24:21>==0x5: opADC();
			opc<24:21>==0x6: opSBC();
			opc<24:21>==0x7: opRSC();
			opc<24:21>==0x8: opTST();
			opc<24:21>==0x9: opTEQ();
			opc<24:21>==0xa: opCMP();
			opc<24:21>==0xb: opCMN();
			opc<24:21>==0xc: opORR();
			opc<24:21>==0xd: opMOV();
			opc<24:21>==0xe: opBIC();
			opc<24:21>==0xf: opMVN();
		}
	}

	instruct oDP0 par {
		Bbus = Rm;
		OP2bus = shift.simm(Bbus, opc<11:7>, opc<6:5>).out;
		ADRbus = INCbus||0b00;
	}

	instruct oDP2 par {
		Bbus = 0x000000||opc<7:0>;
		OP2bus = shift.immrot(Bbus, 0b0||opc<11:8>).out;
		ADRbus = INCbus||0b00;
	}

	instruct oB par {
		Abus = 0b000000||pc||0b00;
		Bbus = 0x00||opc<23:0>;
		OP2bus = shift.simm(Bbus, 0b0||0x2, 0b11).out;
		alu.add(Abus, OP2bus);
		ALUbus = alu.out;
		ADRbus = ALUbus<25:0>;
	}

	instruct opAND par {
		alu.do_and(Abus, OP2bus);
		ALUbus = alu.out;
//		if(opc<20>==1) psr_z := alu.z;
	}
	instruct opEOR par {
		alu.eor(Abus, OP2bus);
		ALUbus = alu.out;
		psr_z := alu.z;
	}
	instruct opSUB par {
		alu.sub(Abus, OP2bus);
		ALUbus = alu.out;
		psr_z := alu.z; psr_c := alu.c; psr_v := alu.v;
	}
	instruct opRSB par {
		alu.rsb(Abus, OP2bus);
		ALUbus = alu.out;
		psr_z := alu.z; psr_c := alu.c; psr_v := alu.v;
	}
	instruct opADD par {
		alu.add(Abus, OP2bus);
		ALUbus = alu.out;
		psr_z := alu.z; psr_c := alu.c; psr_v := alu.v;
	}
	instruct opADC par {
		alu.adc(Abus, OP2bus, psr_c);
		ALUbus = alu.out;
		psr_z := alu.z; psr_c := alu.c; psr_v := alu.v;
	}
	instruct opSBC par {
		alu.sbc(Abus, OP2bus, psr_c);
		ALUbus = alu.out;
		psr_z := alu.z; psr_c := alu.c; psr_v := alu.v;
	}
	instruct opRSC par {
		alu.rsc(Abus, OP2bus, psr_c);
		ALUbus = alu.out;
		psr_z := alu.z; psr_c := alu.c; psr_v := alu.v;
	}
	instruct opTST par {
		alu.tst(Abus, OP2bus);
		psr_z := alu.z;
	}
	instruct opTEQ par {
		alu.teq(Abus, OP2bus);
		psr_z := alu.z;
	}
	instruct opCMP par {
		alu.cmp(Abus, OP2bus);
		psr_z := alu.z;
	}
	instruct opCMN par {
		alu.cmn(Abus, OP2bus);
		psr_z := alu.z;
	}
	instruct opORR par {
		alu.orr(Abus, OP2bus);
		psr_z := alu.z;
	}
	instruct opMOV par {
		alu.mov(OP2bus);
		ALUbus = alu.out;
		psr_z := alu.z;
	}
	instruct opBIC par {
		alu.bic(Abus, OP2bus);
		psr_z := alu.z;
	}
	instruct opMVN par {
		alu.mvn(Abus, OP2bus);
		psr_z := alu.z;
	}


/* Fetch Stage */
/*  - set address of instruction */
	stage ifetch {
		par {
			INCbus = inc.do(ADRbus).out ;		//Increment
			adr := ADRbus;
			relay decode.dec();
		}
	}

/* Decode Stage */
	stage decode {
		par {
			read();				 /* fetch instruction ->OP */
			relay exec.exe();
		}
	}

/* Execute Stage */
	stage exec {
		par {
			decop();
		}
		relay ifetch.run();
	}
}
